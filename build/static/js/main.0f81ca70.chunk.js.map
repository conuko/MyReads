{"version":3,"sources":["utils/BooksAPI.js","components/BookShelfChanger.js","components/Book.js","components/BookShelf.js","components/Library.js","components/SearchBooks.js","components/SearchButton.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","search","query","fetch","method","body","JSON","stringify","then","res","json","data","books","BookShelfChanger","props","book","onSelectShelf","currentBookShelf","forEach","item","id","shelf","className","value","onChange","event","target","disabled","Book","alt","style","width","height","src","imageLinks","thumbnail","title","authors","join","BookShelf","bookShelf","booksOnTheShelf","filter","name","map","Library","bookShelfs","SearchBooks","useState","filteredBooks","setFilteredBooks","setQuery","error","setError","useEffect","a","BooksAPI","length","fetchData","Link","to","type","placeholder","SearchButton","Route","exact","path","render","BooksApp","setBooks","newBook","b","concat","ReactDOM","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.0f81ca70.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react'\n\nconst BookShelfChanger = (props) => {\n    const { book, books, onSelectShelf } = props;\n    \n    const handleChange = event => {\n        const { value } = event.target\n        /*\n        Call the callback function that was passed to this component from App.js \n        with the book props and the book.shelf value selected by the user.\n        This callback allows the child component BookShelfChanger to pass data\n        back to the parent component App.js:\n        */\n        onSelectShelf(book, value);\n    };\n\n    /*\n    When a book that is already on the bookshelf appears on the search page, it should have the same state.\n    E.g if it is set to the 'Currently Reading' shelf then it should also have that option\n    on the search page. Otherwise it should be set to 'None':\n    */\n    let currentBookShelf;\n    books.forEach((item) => {\n        // check, if a book (item) is on a shelf (book --> \"book\" are the books that are on a shelf)\n        if (item.id === book.id) {\n            /*\n            if the checked book is already on a shelf, the status of the currentBookShelf of the book\n            is set to the the name of the shelf, e.g 'currently reading':\n            */\n            currentBookShelf = item.shelf;\n        };\n    });\n\n    return (\n        <div className=\"book-shelf-changer\">\n            <select value={currentBookShelf ? currentBookShelf : \"none\"} onChange={handleChange}>\n                <option value=\"move\" disabled>Move to...</option>\n                <option value=\"currentlyReading\">Currently Reading</option>\n                <option value=\"wantToRead\">Want to Read</option>\n                <option value=\"read\">Read</option>\n                <option value=\"none\">None</option>\n            </select>\n        </div>\n    );\n};\n\nexport default BookShelfChanger;","import React from 'react';\nimport BookShelfChanger from './BookShelfChanger';\n\nconst Book = props => {\n    const { books, book, onSelectShelf } = props;\n    return (\n        <li>\n            <div className=\"book\">\n                <div className=\"book-top\">\n                    <img \n                        className=\"book-cover\"\n                        alt=\"book-cover\"\n                        style={{ width: 128, height: 193 }}\n                        src={ book.imageLinks?.thumbnail ?? '' }\n                    /> \n                    <BookShelfChanger \n                        books={books}\n                        book={book}\n                        onSelectShelf={onSelectShelf}\n                    />\n                </div>\n            <div className=\"book-title\">{book.title}</div>\n            <div className=\"book-authors\">{book.authors && book.authors.join(', ')}</div>\n            </div>\n        </li>\n    )\n}\n\nexport default Book;","import React from 'react';\nimport Book from './Book';\n\nconst BookShelf = props => {\n    const { books, bookShelf, onSelectShelf } = props;\n    /*\n    create the booksOnTheShelf constant to filter \n    only the books that belong to a particular shelf:\n    */\n    const booksOnTheShelf = books.filter((book) => book.shelf === bookShelf.id);\n\n    /* \n    Map over the \"books\" props to render every single book with the Book Component\n    and pass the Book Component \"books\", \"book\" and \"selectShelf\" as Props\n    */\n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{bookShelf.name}</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                    {booksOnTheShelf.map(book => {\n                        return (\n                            <Book key={book.id}\n                                books={books}\n                                book={book}\n                                onSelectShelf={onSelectShelf}\n                            />\n                        )\n                    })}\n                </ol>\n            </div>\n        </div>\n    );\n};\n\nexport default BookShelf;","import React from 'react';\nimport BookShelf from './BookShelf';\n\nconst Library = props => {\n    const { books, onSelectShelf, bookShelfs } = props;\n\n    /* \n    first: map over the bookShelfs object, imported as props from the App Component.\n    second: return a BookShelf Component for each of the three bookShelfs from the bookShelfs object.\n     */\n    return (\n        <div className=\"list-books\">\n            <div className=\"list-books-title\">\n              <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n                {bookShelfs.map((bookShelf) => {\n                    return(\n                        <BookShelf key={bookShelf.id}\n                            books={books}\n                            bookShelf={bookShelf}\n                            onSelectShelf={onSelectShelf}\n                        />\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default Library;","import React, { useState, useEffect } from 'react'\nimport * as BooksAPI from '../utils/BooksAPI';\nimport Book from './Book';\nimport { Link } from 'react-router-dom';\n\nconst SearchBooks = (props) => {\n    const { books, onSelectShelf } = props;\n    const [filteredBooks, setFilteredBooks] = useState([]);\n    const [query, setQuery] = useState('');\n    const [error, setError] = useState(false);\n\n    /* \n    Method to update the query state with the onChange input,\n    given by the user:\n    */\n   const updateQuery = event => {\n    setQuery(event.target.value);\n    };\n\n    /* \n    I wrap the functionality of fetching data into a useEffect Lifecycle hook\n    to fix the error, that my search results still show even if I deleted the\n    search text inside the query state:\n    */\n    useEffect(() => {\n        const fetchData = async () => {\n            setError(false);\n            try {\n                if (query) {\n                    BooksAPI.search(query)\n                        .then((data) => {\n                            if (data.length > 0) {\n                                setFilteredBooks(data);\n                                setError(false);\n                            } else {\n                                setFilteredBooks([]);\n                                setError(true);\n                            }\n                        })\n                    } else {\n                        setFilteredBooks([]);\n                        setError(false);\n                    }\n                } catch (error) {\n                    setError(true);\n                }\n            };\n            fetchData();\n        }, [query]);\n\n    return(\n        <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n                <Link to=\"/my-reads\">\n                        <button type=\"button\" className=\"close-search\">\n                        Close\n                        </button>   \n                </Link>\n                <div className=\"search-books-input-wrapper\">\n                    <input \n                        type=\"text\"\n                        placeholder=\"Search by title or author\"\n                        value={query}\n                        onChange={updateQuery}\n                    />\n                </div>\n            </div>\n            <div className=\"search-books-results\">\n                { filteredBooks.length > 0 && (\n                    <div>\n                        <ol className=\"books-grid\">\n                        {filteredBooks.map((book) => (\n                                <Book key={book.id}\n                                    books={books}\n                                    book={book}\n                                    onSelectShelf={onSelectShelf}\n                                />\n                            ))}\n                        </ol>\n                    </div>\n                )}\n                { error && (\n                    <h3 className=\"error-message\">No books found. Please try again!</h3>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default SearchBooks;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Route } from 'react-router-dom';\n\nconst SearchButton = () => {\n\n    return(\n        <Route exact path=\"/my-reads\" render={() => (\n        <div className=\"open-search\">\n            <Link to=\"my-reads/search\">\n              <button type=\"button\">\n                Add a book\n              </button>\n            </Link>\n        </div>\n        )}/>\n    );\n}\n\nexport default SearchButton;","import React, { useState, useEffect } from 'react'\nimport * as BooksAPI from './utils/BooksAPI'\nimport './App.css'\nimport Library from './components/Library';\nimport SearchBooks from './components/SearchBooks';\nimport SearchButton from './components/SearchButton';\nimport { Route } from 'react-router-dom';\n\n/*     \ncreate an array for the 3 different shelfes with their id and name:\n*/\nconst bookShelfs = [\n  { \n      id: \"currentlyReading\",\n      name: \"Currently Reading\"\n  },\n  { \n      id: \"wantToRead\",\n      name: \"Want to Read\"\n  },\n  { \n      id:\"read\", \n      name: \"Read\"\n  }\n];\n\nconst BooksApp = () => {\n  const [books, setBooks] = useState([]);\n  \n  /* \n  set the initial state with the getAll method from the BooksAPI inside the\n  useEffect lifecycle hook:\n  */\n  useEffect(() => {\n      BooksAPI.getAll()\n        .then((data) => {\n          setBooks((data));\n        })\n  },[]);\n\n  /* \n  this callback method is used to move a book from one shelf to another with the\n  select options from BookShelfChanger Component and the update method from\n  the BooksAPI:\n  */\n  const onSelectShelf = async (newBook, value) => {\n    await BooksAPI.update(newBook, value)\n      .then(() => {\n        /*\n        update the shelf property of the BooksAPI (newBook) with the selected value (this value was updated as an \n        event in the BookShelfChanger and then passed back):\n        */\n        newBook.shelf = value;\n        /*\n        update the state with newBook and filter out the book (if it's there). The concat will add the book\n        to the end of the array:\n        */\n        setBooks(books.filter((b) => (b.id !== newBook.id)).concat(newBook));\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div>\n        <Route exact path=\"/my-reads\" render={() => (\n            <Library\n              books={books}\n              onSelectShelf={onSelectShelf}\n              bookShelfs={bookShelfs}\n            />\n        )} />\n        <SearchButton />\n      </div>\n      <div>\n        <Route path=\"/my-reads/search\" render={() => (\n            <SearchBooks\n              books={books}\n              onSelectShelf={onSelectShelf}\n            />\n        )} />\n      </div>\n    </div>\n  );\n};\n\nexport default BooksApp","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}